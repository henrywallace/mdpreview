// Code generated by go-bindata.
// sources:
// static/favicon.ico
// static/index.html
// static/preview.js
// DO NOT EDIT!

package server

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x31\x68\x1b\x57\x18\xfe\x2c\x47\xaa\x29\xb2\xaa\xc1\x90\x04\x04\xf6\xe0\x80\x3d\xb8\x78\x30\xe1\x54\x42\x12\x4a\x43\xb7\x66\x89\xf7\x0e\x46\xcd\x54\x0c\x1d\xaa\xe1\xb0\x5c\x1a\x4a\x3c\x39\x4b\x0c\x59\x0a\xc9\xa4\x60\x08\x21\x83\x03\x9d\xe2\x96\x0c\xc6\x29\x64\xca\x54\x9c\x66\x71\x17\xd3\x74\xf4\x81\xec\x2b\x4f\xf7\x5d\xf9\x79\xbc\x27\xdd\x49\x8a\x4e\x57\xdf\x07\x3f\xbf\x74\xf7\xfe\xf7\x7d\xef\xdd\x7f\xff\xbd\x7b\x12\x30\x86\x71\x2c\x2e\x2a\x3f\x83\xe6\x25\xe0\x32\x80\x99\x19\x7e\x2f\x03\x07\x97\x80\x72\x39\xf8\x7e\xfb\x1c\xf0\xd3\x65\x60\x0e\xc0\x22\x80\xaf\x11\x1c\x6f\x63\x16\x19\x32\x64\xc8\x90\x21\x83\x8e\x1c\x80\x7c\x4a\x2c\xa7\x69\xaf\x02\xd8\x02\xf0\x4b\x4a\x6c\x8b\x9a\x15\x6e\x02\x38\x00\xe0\xa7\xcc\x0e\xa8\x7d\x5f\x7c\xdf\x04\x70\x77\xc4\x6d\x53\xcc\xb7\xd2\xee\xf1\x73\x2d\x81\x7b\xae\x57\xd4\xa8\x39\xd4\x7e\x02\x60\x39\x69\x51\x31\xb0\x4c\xcd\xfe\xff\x58\xbf\xaa\x51\x45\xcd\xf2\x11\xfa\xee\x35\x0e\x86\xba\xd8\x8f\xfe\x69\xd6\xaa\x7d\x61\x51\xee\x11\x55\xd7\x5e\x6a\x71\x37\x23\xc4\xa9\x71\x7e\x27\xea\x62\xbf\xfa\xe7\x01\x1c\x69\x35\xeb\x6e\x84\xbe\x6f\x88\xfb\xca\x8f\x58\x1b\xf2\xd4\xee\x71\xbc\xf3\x29\xd2\x9f\xe3\x79\xc9\xf5\x92\xd7\xff\x43\xeb\x9f\x36\x5c\xef\xb8\xfa\x97\x0d\x3c\x3e\x73\xd7\x36\x86\x41\xe8\x57\xf9\xda\xe4\xb3\xa4\xda\xa3\xfe\x1b\x5d\x9e\xfd\x4d\xf2\x0c\x5a\x7f\x9e\x9f\x4f\x0c\x73\x15\x55\x7f\x35\xc2\xba\xe5\x84\x6b\x1d\x7d\x0c\xfd\xea\xaf\x19\x34\x6e\x71\x5c\x51\xf4\x57\xc5\xba\xa5\x9b\x79\xe4\x2d\x0e\x48\xbf\x6d\xde\x3c\xd6\x90\x6e\xfa\x8b\xec\x47\xae\x27\xf5\xfe\x3c\xde\xc3\xb2\x4d\x75\x00\xfa\x9b\xec\xd7\x36\x57\x47\xbc\x0e\x9d\xf4\xeb\xef\x19\x39\x8e\x47\xef\x67\xde\xb0\xee\xef\x57\xbf\x67\x88\x3b\xe9\xd2\x26\x4a\xfd\xb7\xe9\xb7\xa1\x57\xfd\xa6\x1a\xb7\x69\x98\x6f\xdd\x46\x51\xff\x01\xdb\x84\x75\x34\x4d\xfa\x8f\xb4\x35\xcd\x74\x97\xfb\x62\x94\xf4\x87\x75\xc6\xf4\x0e\x6d\xab\xe7\xa3\xa2\xdf\xf6\x3c\x91\xfd\x9a\xc6\x9c\x84\x7e\xd3\xfa\xb9\xd9\x65\x5d\x15\xae\x23\xf7\x63\xae\x9f\x6b\x5a\xfb\x4e\x6b\x9f\xa8\xfa\x7b\x7d\x0f\xc9\xf7\x10\x67\x8a\xe9\xf4\x2e\x73\x16\xde\x1f\x47\x19\x52\x7f\xda\xf7\x4f\xd2\xbe\x7f\x95\xf6\xfd\x43\xa4\x78\xff\x56\xd6\xa8\x34\xef\x9f\x67\xc8\x90\x21\x43\x86\x33\x06\xbf\x8d\xfe\xfd\x0b\xd5\xd9\x38\xb0\x8e\xf6\x1f\x8e\xfe\xc3\x35\x75\xba\x65\xf7\x57\xa7\x8f\x1b\x6d\xff\xc9\x71\xe3\x2f\xfa\xdf\xe8\x7f\x50\xbe\x54\x6f\x40\xf9\xa2\xb3\x06\x57\xf9\x0b\x2e\xae\x00\x57\x27\x2e\xd4\xdb\x1e\x68\xfc\xd8\x32\xf8\xb1\xf5\xc0\x8f\xbf\x08\xfc\x47\x7f\xd2\xff\x13\x78\xf2\x74\xd3\x17\x22\x1c\x57\x38\xce\x41\xcd\xdb\x1c\xd0\xfe\x77\xd6\x75\xf9\x3f\xad\xf2\x70\x73\x20\x43\x86\x88\x28\x00\x98\x1c\xb2\x15\xc8\xbd\x04\xe0\x21\x80\xdf\x87\x6c\x0f\xc9\xbd\x07\xe0\x3d\x80\x67\x00\x9e\x0c\xc9\x9e\x91\x73\x8f\xef\x4c\xf7\xb9\x76\x1f\xa6\xdd\x17\xef\x6c\x1b\x09\xe4\xdc\x86\x85\xbf\xc2\xdf\x4a\x94\x2d\x58\x62\x27\x45\x9b\xcf\x44\x2e\xe9\x98\x62\xdb\x38\xfc\x2b\x62\xef\xe3\xb1\xe5\x9d\x6a\x89\xd7\xcf\x63\x2e\x4d\x19\xda\x54\x78\x9d\x37\x2c\xfa\x3a\xf1\xfb\x06\xfe\x82\xf8\x1c\xf2\xab\x36\x6f\x0c\xfc\x53\x8c\x0d\xf7\x42\xbe\x37\x8c\x23\x2a\x3f\x38\x87\x2a\x5f\x6e\x45\xe0\x9f\xd4\x72\xcb\x67\xdb\x95\x1e\xf9\x0b\xd4\x1f\x72\x2d\x74\xe0\x2f\xb0\x2f\xd3\xef\x26\xef\x85\xfe\x38\xfc\xb7\x04\x97\xb2\xe7\xda\x31\xc9\xaf\xf2\x71\x57\xd4\x94\x30\xe6\x2d\x8f\x3d\x66\x5e\x44\xe5\x7f\xc3\x58\x7d\x9f\x7f\x4f\x8c\x51\xf2\xcb\xfa\xfa\x44\xc4\xac\x88\x1a\x5f\x88\xc1\x2f\x6d\xd7\xa0\xc5\x96\x7f\x39\x91\x7f\xbe\xe1\xda\xc7\xe5\xdf\xe5\xbc\xad\x68\xf3\x3a\x0c\xfe\xb7\xcc\x37\x99\x5f\x1f\x9a\xdf\xa3\xe9\x39\x0b\x71\x6f\x7b\x1d\xea\x4f\x4e\xbb\xff\xe3\xf0\xcb\xfa\xbb\x64\xa9\x5d\x95\x08\xf5\x77\x41\xb4\xa9\xc4\xe0\x1f\x16\x24\x7f\x92\xcf\xdf\xa4\xd7\x1f\x49\xaf\xbf\x90\xf0\xfa\x33\x43\x86\xc4\xe0\x5b\xb0\xce\xdd\x96\x6b\xbe\xdf\x0a\xcd\x69\xad\xb9\x4e\xcb\x75\x9d\x3f\xea\x57\x9c\x57\xab\x15\xe7\xce\x6a\xd1\x81\xeb\xb6\x6d\xd1\x75\x9d\x55\xd7\x75\x8e\x5d\x57\xc6\x20\xd8\xe3\x18\xb3\xf1\xcc\x71\x5b\x62\x46\xee\x53\x9c\x4b\x76\x4e\x2c\x98\x00\x70\x1e\xc0\x45\xfa\x28\x16\xb6\x55\xb1\x0f\x00\x3c\x02\xf0\x73\x4c\x7b\xc4\xd8\xe7\xec\xaf\x44\x2b\x0b\xd3\x8f\x95\x84\x5d\x64\xec\x53\x00\x1f\x03\xf8\x06\x40\x9d\x9a\xc0\xf3\xf7\x00\x7c\x29\xc6\xaa\x9e\xa9\x9f\x8a\x71\x3f\x15\xf1\xdb\x00\x5e\x31\x2e\x6c\xf7\x37\xfb\x0c\x63\xdf\xb1\xcd\x6c\x87\xf8\x3b\x6c\x57\x17\xf1\xe7\x79\xbe\xc5\x63\xf7\x78\x4c\x8f\x0f\xcf\xbf\xa3\x6f\x09\x7e\xc5\xf9\x1a\xc0\x0e\x63\x4b\x96\xf8\x6d\x6a\x7d\xad\xc5\x97\xa8\x6f\xdb\x32\xfe\x1a\x75\xcd\x8a\xf1\x3e\x10\xf3\x37\xc1\xbe\x6e\x6b\xf1\x3b\xda\xf5\x2b\x19\xae\x95\xed\xfa\xed\x0c\x20\x7f\xfa\xcd\xdf\x44\x11\xec\x6d\x06\xa6\xd0\x38\x05\xd6\x4e\x81\xaf\x0e\x81\xcf\x7f\x05\xae\x1f\x02\x5f\x1c\x02\xdf\x9e\x06\xe7\xf4\x98\x7f\x03\x00\x00\xff\xff\xdd\xcd\xca\x71\xee\x3a\x00\x00")

func staticFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_staticFaviconIco,
		"static/favicon.ico",
	)
}

func staticFaviconIco() (*asset, error) {
	bytes, err := staticFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/favicon.ico", size: 15086, mode: os.FileMode(420), modTime: time.Unix(1502672816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x4d\x6f\x14\x31\x0c\xbd\xcf\xaf\x30\x39\x81\xc4\x4c\xda\x8a\x52\x58\x92\x05\x09\x38\xc3\x81\x0b\xc7\x4c\xe2\xce\x98\x66\x92\x28\xf1\x7e\xb1\xda\xff\x8e\xe6\x63\xcb\x96\x8a\x5c\x2c\xfb\xd9\xef\x39\xb6\xd5\x8b\x2f\xdf\x3e\xff\xf8\xf9\xfd\x2b\xf4\x3c\xf8\x75\xa5\x46\x03\xde\x84\x4e\x0b\x0c\x62\x5d\x55\xaa\x47\xe3\xd6\x15\x00\x80\x1a\x90\x0d\x04\x33\xa0\x16\x5b\xc2\x5d\x8a\x99\x05\xd8\x18\x18\x03\x6b\xb1\x23\xc7\xbd\x76\xb8\x25\x8b\xf5\xe4\xbc\x06\x0a\xc4\x64\x7c\x5d\xac\xf1\xa8\xaf\xc5\x42\xc4\xc4\x1e\xd7\xc7\x23\x34\xc9\x70\x0f\xa7\x93\x92\x73\x68\x86\x3d\x85\x07\xc8\xe8\xb5\x20\x1b\x83\x80\x3e\xe3\xbd\x16\xf2\xde\x6c\x47\xbf\x21\x1b\x3f\x6e\xf5\x8d\x00\xf9\x2c\xbf\xf0\xc1\x63\xe9\x11\xf9\x5c\xd5\x33\xa7\xb2\x92\x32\x9b\x5d\x47\xdc\xd8\x38\xc8\x42\xc1\x65\x2c\x31\xf7\x9b\x22\x3b\xe2\x7e\xd3\xd6\x83\xc9\x0f\x2e\xee\x42\x6d\x4b\x91\x5d\x5f\x27\xd3\xe1\x33\xb0\xb1\xa5\x4c\xaa\x4a\xce\x53\xa9\xd4\x24\x38\xb7\xd1\x3c\x72\xb4\xd1\x1d\xe0\x38\x05\xc7\xd7\xc6\x7d\x5d\xe8\x37\x85\x6e\x05\x6d\xcc\x0e\x73\xdd\xc6\xfd\x87\x47\x7c\xa0\x30\xcf\x6b\x05\x37\x57\x57\xe9\x12\x31\xfb\x33\xf2\xfe\xdd\x3f\x48\xee\x28\xac\xe0\x0a\xcc\x86\xe3\xdf\x78\x32\xce\x4d\x42\x6f\x6e\xcf\xe9\xa7\x6a\x32\x9f\x06\x74\x64\xe0\xe5\x05\xe7\xdd\xdb\xbb\xb4\x7f\x75\xd1\xe9\x7f\xbf\xf0\x84\xfa\xfa\xf6\xb2\x93\xd3\x22\xa2\xe4\x32\x8b\x4a\x8d\xc5\xcb\x6a\x4c\x66\xb2\x1e\x81\x9c\x16\x29\xe3\x78\x36\x02\xac\x37\xa5\x68\xf1\x44\x4c\x00\x1f\x12\xea\xe9\x0c\x95\x5c\xca\x16\x92\x62\x33\x25\x86\x92\xad\x16\x72\x61\x69\x7e\x15\xb1\x56\x72\x86\xc6\x8d\xcc\xa2\xe3\x6a\x46\x8a\x3f\x01\x00\x00\xff\xff\xf0\x38\xc6\x61\xd9\x02\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 729, mode: os.FileMode(420), modTime: time.Unix(1502673808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticPreviewJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x41\x4b\x33\x31\x10\x86\xef\xfd\x15\x2f\xbd\xec\x2e\x85\xf4\xfe\x95\x5c\x3e\x11\x14\xf4\xa4\xe0\x39\x26\x63\xbb\x98\x9d\x29\xc9\xec\x46\x91\xfe\x77\xc9\xba\xb5\x1e\x3c\x98\x53\x48\x9e\xf7\x99\x79\xdb\x97\x91\xbd\xf6\xc2\x68\x3b\x7c\xac\x00\x60\x72\x09\x63\x8a\xb0\x68\x4a\xfe\xb7\xdd\x36\xd8\xa0\xf4\x1c\xa4\x98\x28\xde\x55\xd8\x1c\x24\xeb\x2f\xcf\x47\xa7\x07\x76\x03\x61\x53\xb3\xcd\xee\xdb\x77\x4c\x34\xf5\x54\x60\x11\xc4\x8f\x03\xb1\x9a\x3d\xe9\x75\xa4\x7a\xfd\xff\x7e\x1b\xda\xf5\x82\xac\xbb\x4b\xca\x0b\x33\x2c\x98\x0a\x9e\xe8\xf9\x41\xfc\x2b\x69\x3b\xa6\xd8\xed\x56\x33\x53\xff\x8d\xb0\x8f\x92\x09\x16\x97\x2a\x34\x11\xeb\xb9\x4f\x3d\x8b\xdc\x28\xbd\xe9\x95\xb0\x12\x6b\xed\x57\x05\xf4\x95\x99\x25\x61\x59\xf9\xf4\x53\x3f\x50\xce\x6e\xff\xc7\x01\x3d\x33\xa5\x9b\xc7\xfb\x3b\x58\xcc\x90\x09\x4e\xdd\xd9\x7a\xea\xda\xee\x33\x00\x00\xff\xff\xe4\x18\x5f\x51\x72\x01\x00\x00")

func staticPreviewJsBytes() ([]byte, error) {
	return bindataRead(
		_staticPreviewJs,
		"static/preview.js",
	)
}

func staticPreviewJs() (*asset, error) {
	bytes, err := staticPreviewJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/preview.js", size: 370, mode: os.FileMode(420), modTime: time.Unix(1502658362, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/favicon.ico": staticFaviconIco,
	"static/index.html":  staticIndexHtml,
	"static/preview.js":  staticPreviewJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{staticFaviconIco, map[string]*bintree{}},
		"index.html":  &bintree{staticIndexHtml, map[string]*bintree{}},
		"preview.js":  &bintree{staticPreviewJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
